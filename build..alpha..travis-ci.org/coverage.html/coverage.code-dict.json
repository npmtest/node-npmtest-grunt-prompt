{"/home/travis/build/npmtest/node-npmtest-grunt-prompt/test.js":"/* istanbul instrument in package npmtest_grunt_prompt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-prompt/lib.npmtest_grunt_prompt.js":"/* istanbul instrument in package npmtest_grunt_prompt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_prompt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_prompt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-prompt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-prompt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_prompt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_prompt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_prompt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_prompt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_prompt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_prompt.__dirname + '/lib.npmtest_grunt_prompt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-prompt/node_modules/grunt-prompt/Gruntfile.js":"/*\n * grunt-prompt\n * https://github.com/dylang/grunt-prompt\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar semver = require('semver');\nvar currentVersion = require('./package.json').version;\nvar chalk = require('chalk');\nvar _ = require('lodash');\n\nmodule.exports = function (grunt) {\n\n\n    // Project configuration.\n    grunt.initConfig({\n\n        pkg: grunt.file.readJSON('package.json'),\n\n        jshint: {\n            options: {\n                jshintrc: '.jshintrc',\n                ignores: []\n            },\n            task: [\n                'Gruntfile.js',\n                'tasks/**/*.js'\n            ]\n        },\n\n        specialVariable: 'a special thing',\n\n        specialFunction: function () {\n            return 'a dynamic value [' + new Date() + ']';\n        },\n\n        // Configuration to be run (and then tested).\n        prompt: {\n            examples: {\n                options: {\n                    questions: [\n                        {\n                            config: 'echo.list',\n                            type: 'list',\n                            message: 'Choose an item from a list, returns the value',\n                            choices: [\n                                { name: chalk.white('White') },\n                                { name: chalk.grey('Grey') },\n                                '---',\n                                { name: chalk.blue('Blue'), value: 'blue' },\n                                { name: chalk.cyan('Cyan') },\n                                { name: chalk.green('Green') },\n                                { name: chalk.magenta('Magenta') },\n                                { name: chalk.red('Red') },\n                                { name: chalk.yellow('Yellow') },\n                            ],\n                            default: 'blue',\n                            filter: function(str) {\n                                return chalk.stripColor(str.toLowerCase());\n                            }\n                        },\n                        {\n                            config: 'echo.checkbox',\n                            type: 'checkbox',\n                            message: 'Choose multiple items, returns an array of values',\n                            choices: [\n                                { name: chalk.bold('Bold'), value: 'bold' },\n                                { name: chalk.italic('Italic') },\n                                { name: chalk.underline('Underline'), value: 'underline' },\n                                { name: chalk.inverse('Inverse') },\n                                { name: chalk.strikethrough('Strikethrough') }\n                            ],\n                            default: [\n                                'bold', 'underline'\n                            ],\n                            filter: function(value) {\n                                return _(value)\n                                    .map(chalk.stripColor)\n                                    .map(function(str){\n                                        return str.toLowerCase();\n                                    })\n                                    .value();\n                            }\n                        },\n                        {\n                            config: 'echo.confirm',\n                            type: 'confirm',\n                            message: 'Choose yes or no, returns a boolean'\n                        },\n                        {\n                            config: 'echo.input',\n                            type: 'input',\n                            message: 'Text input',\n                            validate: function(value) {\n                                if (value === '') {\n                                    return 'A value is required.';\n                                }\n                                return true;\n                            }\n                        },\n                        {\n                            config: 'echo.password',\n                            type: 'password',\n                            message: 'Password input',\n                            validate: function(value) {\n                                if (value.length < 5) {\n                                    return 'Password should be at least 5 characters.';\n                                }\n                                return true;\n                            }\n                        }\n                    ],\n                    then: function(){\n                        console.log(chalk.green.bold.underline('Great job!'));\n                    }\n                }\n            },\n\n            test: {\n                options: {\n                    questions: [\n                        {\n                            config: 'test',\n                            type: 'input',\n                            message: 'Just press enter, the result should be the default.',\n                            default: 1\n                        }\n                    ],\n                    then: function(results){\n                        console.log('results from this test', results);\n                    }\n                }\n            },\n\n            mochacli: {\n                options: {\n                    questions: [\n                        {\n                            config: 'mochacli.options.reporter',\n                            type: 'list',\n                            message: 'Which Mocha reporter would you like to use?',\n                            default: 'spec',\n                            choices: [\n                                { name: 'dot' },\n                                { name: 'spec' },\n                                { name: 'nyan' },\n                                { name: 'TAP' },\n                                { name: 'landing' },\n                                { name: 'list' },\n                                { name: 'progress' },\n                                { name: 'json' },\n                                { name: 'JSONconv' },\n                                { name: 'HTMLconv' },\n                                { name: 'min' },\n                                { name: 'doc' }\n                                ]\n                        }\n                    ]\n                }\n            },\n\n            bump: {\n                options: {\n                    questions: [\n                        {\n                            config: 'bump.increment',\n                            type: 'list',\n                            message: 'Bump version from ' + '<%= pkg.version %>'.cyan + ' to:',\n                            choices: [\n                                {\n                                    value: 'build',\n                                    name: 'Build:  '.yellow + (currentVersion + '-?').yellow +\n                                        ' Unstable, betas, and release candidates.'\n                                },\n                                {\n                                    value: 'patch',\n                                    name: 'Patch:  '.yellow + semver.inc(currentVersion, 'patch').yellow +\n                                        '   Backwards-compatible bug fixes.'\n                                },\n                                {\n                                    value: 'minor',\n                                    name: 'Minor:  '.yellow + semver.inc(currentVersion, 'minor').yellow +\n                                        '   Add functionality in a backwards-compatible manner.'\n                                },\n                                {\n                                    value: 'major',\n                                    name: 'Major:  '.yellow + semver.inc(currentVersion, 'major').yellow +\n                                        '   Incompatible API changes.'\n                                },\n                                {\n                                    value: 'custom',\n                                    name: 'Custom: ?.?.?'.yellow +\n                                        '   Specify version...'\n                                }\n                            ]\n                        },\n                        {\n                            config: 'bump.version',\n                            type: 'input',\n                            message: 'What specific version would you like',\n                            when: function (answers) {\n                                return answers['bump.increment'] === 'custom';\n                            },\n                            validate: function (value) {\n                                var valid = semver.valid(value) && true;\n                                return valid || 'Must be a valid semver, such as 1.2.3-rc1. See ' + 'http://semver.org/'.blue.underline + ' for more details.';\n                            }\n                        },\n                        {\n                            config: 'bump.files',\n                            type: 'checkbox',\n                            message: 'What should get the new version:',\n                            choices: [\n                                {\n                                    value: 'package',\n                                    name: 'package.json' + (!grunt.file.isFile('package.json') ? ' file not found, will create one'.grey : ''),\n                                    checked: grunt.file.isFile('package.json')\n                                },\n                                {\n                                    value: 'bower',\n                                    name: 'bower.json' + (!grunt.file.isFile('bower.json') ? ' file not found, will create one'.grey : ''),\n                                    checked: grunt.file.isFile('bower.json')\n                                },\n                                {\n                                    value: 'git',\n                                    name: 'git tag',\n                                    checked: grunt.file.isDir('.git')\n                                }\n                            ]\n                        }\n                    ]\n                }\n            },\n            dynamic: {\n                options: {\n                    questions: [\n                        {\n                            config: 'echo.dynamic',\n                            type: 'input',\n                            message: function () {\n                                var specialVariable = grunt.config('specialVariable'),\n                                    specialFunction = grunt.config('specialFunction');\n\n                                return 'You can use ' + chalk.yellow(specialVariable) + ' and even ' + chalk.red(specialFunction()) + ' in your questions';\n                            }\n                        },\n                    ]\n                }\n            },\n            separator: {\n                options: {\n                    questions: [\n                        {\n                            config: 'separator',\n                            type: 'list',\n                            message: 'List of choices with custom Separator',\n                            choices: [\n                                { separator: chalk.bold.red('HEADING') },\n                                'Label 1',\n                                'Label 2',\n                                '',\n                                {name: 'Label 3'},\n                                {name: 'Label 4'},\n                                '---',\n                                {name: 'Label 5'},\n                                {name: 'Label 6'}\n                            ]\n                        }\n                    ]\n                }\n            }\n        },\n\n        mochacli: {\n            src: 'test/**/*.test.js',\n            options: {\n                timeout: 10000,\n                ui: 'bdd',\n                reporter: 'spec',\n                require: [\n                    'chai'\n                ]\n            }\n        }\n    });\n\n    grunt.registerTask('results', 'show results from grunt-prompt', function(subtask){\n        _(grunt.config('prompt'))\n            .pick(subtask || _.constant(true))\n            .pluck('options')\n            .pluck('questions')\n            .flatten()\n            .pluck('config')\n            .each(function(key){\n                console.log(key + ':\\t', grunt.config(key));\n            });\n    });\n\n    // Fake Grunt Bump task\n    grunt.registerTask('bump', '', function () {\n        if (grunt.config('bump.increment') === 'custom') {\n            grunt.log.ok('Bumping version to ' + grunt.config('bump.version').yellow + ':');\n        } else {\n            grunt.log.ok('Bumping up ' + grunt.config('bump.increment').yellow + ' version number.');\n        }\n\n        if (_(grunt.config('bump.files')).contains('package')) {\n            grunt.log.ok('Updating ' + 'package.json'.yellow + '.');\n        }\n\n        if (_(grunt.config('bump.files')).contains('bower')) {\n            if (!grunt.file.isFile('bower.json')) {\n                grunt.log.ok('Creating ' + 'bower.json'.yellow + '.');\n            }\n            grunt.log.ok('Updating ' + 'bower.json'.yellow + '.');\n        }\n\n        if (_(grunt.config('bump.files')).contains('git')) {\n            grunt.log.ok('Updating ' + 'git tag'.yellow + '.');\n        }\n    });\n\n    grunt.registerTask('bump',\n        [\n            //'jshint',\n            'prompt:bump',\n            'bump'\n        ]);\n\n    grunt.registerTask('test',\n        [\n            'jshint',\n            'prompt:mochacli',\n            'mochacli'\n        ]);\n\n    grunt.registerTask('dynamic',\n        [\n            'prompt:dynamic',\n            'results:dynamic'\n        ]);\n\n    grunt.registerTask('default',\n        [\n            'jshint',\n            'prompt:examples',\n            'results:examples'\n        ]);\n\n    require('load-grunt-tasks')(grunt);\n\n    grunt.loadTasks('tasks');\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-prompt/node_modules/grunt-prompt/tasks/prompt.js":"/*\n * grunt-prompt\n * https://github.com/dylang/grunt-prompt\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function (grunt) {\n    grunt.registerMultiTask('prompt', 'Interactive command line user prompts.', function () {\n\n        var inquirer = require('inquirer'),\n            options = this.options(),\n            _ = require('lodash');\n\n        var questions = options.questions;\n\n        function addSeparator(choices) {\n            if (!choices || _.isFunction(choices)) {\n                return choices;\n            }\n\n            return choices.map(function(choice){\n                if (choice === '---' || !choice || (choice && choice.separator)) {\n                    return new inquirer.Separator(choice && choice.separator);\n                }\n                return choice;\n            });\n        }\n\n\n        if (questions) {\n            var done = this.async();\n\n            questions = questions.map(function(question){\n                // config just made more sense than name, but we accept both\n                question.name = question.config || question.name;\n                question.choices = addSeparator(question.choices);\n                return question;\n            });\n\n            inquirer.prompt( questions, function( answers ) {\n                _.forEach(answers, function(answer, configName){\n                    grunt.config(configName, answer);\n                });\n                var delegateAsync = false;\n                if (_.isFunction(options.then)) {\n                    delegateAsync = options.then(answers, done);\n                }\n                if (!delegateAsync) {\n                    done();\n                }\n            });\n        }\n    });\n};\n"}